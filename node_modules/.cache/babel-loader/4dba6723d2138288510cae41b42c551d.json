{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    return (extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) b.hasOwnProperty(p) && (d[p] = b[p]);\n    })(d, b);\n  };\n\n  return function (d, b) {\n    function __() {\n      this.constructor = d;\n    }\n\n    extendStatics(d, b), d.prototype = null === b ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}(),\n    __assign = this && this.__assign || function () {\n  return (__assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) for (var p in s = arguments[i]) Object.prototype.hasOwnProperty.call(s, p) && (t[p] = s[p]);\n\n    return t;\n  }).apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n});\n\nvar React = require(\"react\"),\n    utils_1 = require(\"./utils\"),\n    types_1 = require(\"./types\"),\n    Dots_1 = require(\"./Dots\"),\n    Arrows_1 = require(\"./Arrows\"),\n    CarouselItems_1 = require(\"./CarouselItems\"),\n    defaultTransitionDuration = 400,\n    defaultTransition = \"transform 400ms ease-in-out\",\n    Carousel = function (_super) {\n  function Carousel(props) {\n    var _this = _super.call(this, props) || this;\n\n    return _this.containerRef = React.createRef(), _this.state = {\n      itemWidth: 0,\n      slidesToShow: 0,\n      currentSlide: 0,\n      totalItems: React.Children.count(props.children),\n      deviceType: \"\",\n      domLoaded: !1,\n      transform: 0,\n      containerWidth: 0\n    }, _this.onResize = _this.onResize.bind(_this), _this.handleDown = _this.handleDown.bind(_this), _this.handleMove = _this.handleMove.bind(_this), _this.handleOut = _this.handleOut.bind(_this), _this.onKeyUp = _this.onKeyUp.bind(_this), _this.handleEnter = _this.handleEnter.bind(_this), _this.setIsInThrottle = _this.setIsInThrottle.bind(_this), _this.next = utils_1.throttle(_this.next.bind(_this), props.transitionDuration || defaultTransitionDuration, _this.setIsInThrottle), _this.previous = utils_1.throttle(_this.previous.bind(_this), props.transitionDuration || defaultTransitionDuration, _this.setIsInThrottle), _this.goToSlide = utils_1.throttle(_this.goToSlide.bind(_this), props.transitionDuration || defaultTransitionDuration, _this.setIsInThrottle), _this.onMove = !1, _this.initialX = 0, _this.lastX = 0, _this.isAnimationAllowed = !1, _this.direction = \"\", _this.initialY = 0, _this.isInThrottle = !1, _this;\n  }\n\n  return __extends(Carousel, _super), Carousel.prototype.setIsInThrottle = function (isInThrottle) {\n    void 0 === isInThrottle && (isInThrottle = !1), this.isInThrottle = isInThrottle;\n  }, Carousel.prototype.componentDidMount = function () {\n    this.setState({\n      domLoaded: !0\n    }), this.setItemsToShow(), window.addEventListener(\"resize\", this.onResize), this.onResize(!0), this.props.keyBoardControl && window.addEventListener(\"keyup\", this.onKeyUp), this.props.autoPlay && this.props.autoPlaySpeed && (this.autoPlay = setInterval(this.next, this.props.autoPlaySpeed));\n  }, Carousel.prototype.setClones = function (slidesToShow, itemWidth, forResizing) {\n    var _this = this;\n\n    this.isAnimationAllowed = !1;\n    var childrenArr = React.Children.toArray(this.props.children),\n        initialSlide = utils_1.getInitialSlideInInifteMode(slidesToShow || this.state.slidesToShow, childrenArr),\n        clones = utils_1.getClones(this.state.slidesToShow, childrenArr);\n    utils_1.notEnoughChildren(this.state, this.props, slidesToShow) || this.setState({\n      totalItems: clones.length,\n      currentSlide: forResizing ? this.state.currentSlide : initialSlide\n    }, function () {\n      _this.correctItemsPosition(itemWidth || _this.state.itemWidth);\n    });\n  }, Carousel.prototype.setItemsToShow = function (shouldCorrectItemPosition) {\n    var _this = this,\n        responsive = this.props.responsive;\n\n    Object.keys(responsive).forEach(function (item) {\n      var _a = responsive[item],\n          breakpoint = _a.breakpoint,\n          items = _a.items,\n          max = breakpoint.max,\n          min = breakpoint.min;\n      window.innerWidth >= min && window.innerWidth <= max && (_this.setState({\n        slidesToShow: items,\n        deviceType: item\n      }), _this.setContainerAndItemWidth(items, shouldCorrectItemPosition));\n    });\n  }, Carousel.prototype.setContainerAndItemWidth = function (slidesToShow, shouldCorrectItemPosition) {\n    var _this = this;\n\n    if (this.containerRef && this.containerRef.current) {\n      var containerWidth = this.containerRef.current.offsetWidth,\n          itemWidth_1 = utils_1.getItemClientSideWidth(this.props, slidesToShow, containerWidth);\n      this.setState({\n        containerWidth: containerWidth,\n        itemWidth: itemWidth_1\n      }, function () {\n        _this.props.infinite && _this.setClones(slidesToShow, itemWidth_1, shouldCorrectItemPosition);\n      }), shouldCorrectItemPosition && this.correctItemsPosition(itemWidth_1);\n    }\n  }, Carousel.prototype.correctItemsPosition = function (itemWidth, isAnimationAllowed) {\n    isAnimationAllowed && (this.isAnimationAllowed = !0), !isAnimationAllowed && this.isAnimationAllowed && (this.isAnimationAllowed = !1), this.setState({\n      transform: -itemWidth * this.state.currentSlide\n    });\n  }, Carousel.prototype.onResize = function (value) {\n    var shouldCorrectItemPosition;\n    shouldCorrectItemPosition = !!this.props.infinite && (\"boolean\" != typeof value || !value), this.setItemsToShow(shouldCorrectItemPosition);\n  }, Carousel.prototype.componentDidUpdate = function (_a, _b) {\n    var _this = this,\n        keyBoardControl = _a.keyBoardControl,\n        autoPlay = _a.autoPlay,\n        containerWidth = _b.containerWidth,\n        domLoaded = _b.domLoaded;\n\n    this.containerRef && this.containerRef.current && this.containerRef.current.offsetWidth !== containerWidth && setTimeout(function () {\n      _this.setItemsToShow(!0);\n    }, this.props.transitionDuration || defaultTransitionDuration), keyBoardControl && !this.props.keyBoardControl && window.removeEventListener(\"keyup\", this.onKeyUp), !keyBoardControl && this.props.keyBoardControl && window.addEventListener(\"keyup\", this.onKeyUp), autoPlay && !this.props.autoPlay && this.autoPlay && (clearInterval(this.autoPlay), this.autoPlay = void 0), autoPlay || !this.props.autoPlay || this.autoPlay || (this.autoPlay = setInterval(this.next, this.props.autoPlaySpeed)), this.props.infinite && this.correctClonesPosition({\n      domLoaded: domLoaded\n    });\n  }, Carousel.prototype.correctClonesPosition = function (_a) {\n    var _this = this,\n        domLoaded = _a.domLoaded,\n        childrenArr = React.Children.toArray(this.props.children),\n        _b = utils_1.checkClonesPosition(this.state, childrenArr, this.props),\n        isReachingTheEnd = _b.isReachingTheEnd,\n        isReachingTheStart = _b.isReachingTheStart,\n        nextSlide = _b.nextSlide,\n        nextPosition = _b.nextPosition;\n\n    this.state.domLoaded && domLoaded && (isReachingTheEnd || isReachingTheStart) && (this.isAnimationAllowed = !1, setTimeout(function () {\n      _this.setState({\n        transform: nextPosition,\n        currentSlide: nextSlide\n      });\n    }, this.props.transitionDuration || defaultTransitionDuration));\n  }, Carousel.prototype.next = function (slidesHavePassed) {\n    var _this = this;\n\n    void 0 === slidesHavePassed && (slidesHavePassed = 0);\n    var _a = this.props,\n        afterChange = _a.afterChange,\n        beforeChange = _a.beforeChange;\n\n    if (!utils_1.notEnoughChildren(this.state, this.props)) {\n      var _b = utils_1.populateNextSlides(this.state, this.props, slidesHavePassed),\n          nextSlides = _b.nextSlides,\n          nextPosition = _b.nextPosition,\n          previousSlide = this.state.currentSlide;\n\n      void 0 !== nextSlides && void 0 !== nextPosition && (\"function\" == typeof beforeChange && beforeChange(nextSlides, this.getState()), this.isAnimationAllowed = !0, this.setState({\n        transform: nextPosition,\n        currentSlide: nextSlides\n      }, function () {\n        \"function\" == typeof afterChange && setTimeout(function () {\n          afterChange(previousSlide, _this.getState());\n        }, _this.props.transitionDuration || defaultTransitionDuration);\n      }));\n    }\n  }, Carousel.prototype.previous = function (slidesHavePassed) {\n    var _this = this;\n\n    void 0 === slidesHavePassed && (slidesHavePassed = 0);\n    var _a = this.props,\n        afterChange = _a.afterChange,\n        beforeChange = _a.beforeChange;\n\n    if (!utils_1.notEnoughChildren(this.state, this.props)) {\n      var _b = utils_1.populatePreviousSlides(this.state, this.props, slidesHavePassed),\n          nextSlides = _b.nextSlides,\n          nextPosition = _b.nextPosition;\n\n      if (void 0 !== nextSlides && void 0 !== nextPosition) {\n        var previousSlide = this.state.currentSlide;\n        \"function\" == typeof beforeChange && beforeChange(nextSlides, this.getState()), this.isAnimationAllowed = !0, this.setState({\n          transform: nextPosition,\n          currentSlide: nextSlides\n        }, function () {\n          \"function\" == typeof afterChange && setTimeout(function () {\n            afterChange(previousSlide, _this.getState());\n          }, _this.props.transitionDuration || defaultTransitionDuration);\n        });\n      }\n    }\n  }, Carousel.prototype.componentWillUnmount = function () {\n    window.removeEventListener(\"resize\", this.onResize), this.props.keyBoardControl && window.removeEventListener(\"keyup\", this.onKeyUp), this.props.autoPlay && this.autoPlay && (clearInterval(this.autoPlay), this.autoPlay = void 0);\n  }, Carousel.prototype.resetMoveStatus = function () {\n    this.onMove = !1, this.initialX = 0, this.lastX = 0, this.direction = \"\", this.initialY = 0;\n  }, Carousel.prototype.handleDown = function (e) {\n    if (!(!types_1.isMouseMoveEvent(e) && !this.props.swipeable || types_1.isMouseMoveEvent(e) && !this.props.draggable || this.isInThrottle)) {\n      var _a = types_1.isMouseMoveEvent(e) ? e : e.touches[0],\n          clientX = _a.clientX,\n          clientY = _a.clientY;\n\n      this.onMove = !0, this.initialX = clientX, this.initialY = clientY, this.lastX = clientX, this.isAnimationAllowed = !1;\n    }\n  }, Carousel.prototype.handleMove = function (e) {\n    if (!(!types_1.isMouseMoveEvent(e) && !this.props.swipeable || types_1.isMouseMoveEvent(e) && !this.props.draggable || utils_1.notEnoughChildren(this.state, this.props))) {\n      var _a = types_1.isMouseMoveEvent(e) ? e : e.touches[0],\n          clientX = _a.clientX,\n          clientY = _a.clientY,\n          diffX = this.initialX - clientX,\n          diffY = this.initialY - clientY;\n\n      if (!types_1.isMouseMoveEvent(e) && this.autoPlay && this.props.autoPlay && (clearInterval(this.autoPlay), this.autoPlay = void 0), this.onMove) {\n        if (!(Math.abs(diffX) > Math.abs(diffY))) return;\n\n        var _b = utils_1.populateSlidesOnMouseTouchMove(this.state, this.props, this.initialX, this.lastX, clientX),\n            direction = _b.direction,\n            nextPosition = _b.nextPosition,\n            canContinue = _b.canContinue;\n\n        direction && (this.direction = direction, canContinue && void 0 !== nextPosition && this.setState({\n          transform: nextPosition\n        })), this.lastX = clientX;\n      }\n    }\n  }, Carousel.prototype.handleOut = function (e) {\n    this.props.autoPlay && !this.autoPlay && (this.autoPlay = setInterval(this.next, this.props.autoPlaySpeed));\n    var shouldDisableOnMobile = \"touchend\" === e.type && !this.props.swipeable,\n        shouldDisableOnDesktop = (\"mouseleave\" === e.type || \"mouseup\" === e.type) && !this.props.draggable;\n\n    if (!shouldDisableOnMobile && !shouldDisableOnDesktop && this.onMove) {\n      if (\"right\" === this.direction) if (this.initialX - this.lastX >= this.props.minimumTouchDrag) {\n        var slidesHavePassed = Math.round((this.initialX - this.lastX) / this.state.itemWidth);\n        this.next(slidesHavePassed);\n      } else this.correctItemsPosition(this.state.itemWidth, !0);\n      if (\"left\" === this.direction) if (this.lastX - this.initialX > this.props.minimumTouchDrag) {\n        slidesHavePassed = Math.round((this.lastX - this.initialX) / this.state.itemWidth);\n        this.previous(slidesHavePassed);\n      } else this.correctItemsPosition(this.state.itemWidth, !0);\n      this.resetMoveStatus();\n    }\n  }, Carousel.prototype.onKeyUp = function (e) {\n    switch (e.keyCode) {\n      case 37:\n        return this.previous();\n\n      case 39:\n        return this.next();\n    }\n  }, Carousel.prototype.handleEnter = function () {\n    this.autoPlay && this.props.autoPlay && (clearInterval(this.autoPlay), this.autoPlay = void 0);\n  }, Carousel.prototype.goToSlide = function (slide, skipCallbacks) {\n    var _this = this;\n\n    if (!this.isInThrottle) {\n      var itemWidth = this.state.itemWidth,\n          _a = this.props,\n          afterChange = _a.afterChange,\n          beforeChange = _a.beforeChange,\n          previousSlide = this.state.currentSlide;\n      \"function\" != typeof beforeChange || skipCallbacks && (\"object\" != typeof skipCallbacks || skipCallbacks.skipBeforeChange) || beforeChange(slide, this.getState()), this.isAnimationAllowed = !0, this.setState({\n        currentSlide: slide,\n        transform: -itemWidth * slide\n      }, function () {\n        _this.props.infinite && _this.correctClonesPosition({\n          domLoaded: !0\n        }), \"function\" != typeof afterChange || skipCallbacks && (\"object\" != typeof skipCallbacks || skipCallbacks.skipAfterChange) || setTimeout(function () {\n          afterChange(previousSlide, _this.getState());\n        }, _this.props.transitionDuration || defaultTransitionDuration);\n      });\n    }\n  }, Carousel.prototype.getState = function () {\n    return __assign({}, this.state, {\n      onMove: this.onMove,\n      direction: this.direction\n    });\n  }, Carousel.prototype.renderLeftArrow = function () {\n    var _this = this,\n        customLeftArrow = this.props.customLeftArrow;\n\n    return React.createElement(Arrows_1.LeftArrow, {\n      customLeftArrow: customLeftArrow,\n      getState: function () {\n        return _this.getState();\n      },\n      previous: this.previous\n    });\n  }, Carousel.prototype.renderRightArrow = function () {\n    var _this = this,\n        customRightArrow = this.props.customRightArrow;\n\n    return React.createElement(Arrows_1.RightArrow, {\n      customRightArrow: customRightArrow,\n      getState: function () {\n        return _this.getState();\n      },\n      next: this.next\n    });\n  }, Carousel.prototype.renderButtonGroups = function () {\n    var _this = this,\n        customButtonGroup = this.props.customButtonGroup;\n\n    return customButtonGroup ? React.cloneElement(customButtonGroup, {\n      previous: function () {\n        return _this.previous();\n      },\n      next: function () {\n        return _this.next();\n      },\n      goToSlide: function (slideIndex, skipCallbacks) {\n        return _this.goToSlide(slideIndex, skipCallbacks);\n      },\n      carouselState: this.getState()\n    }) : null;\n  }, Carousel.prototype.renderDotsList = function () {\n    var _this = this;\n\n    return React.createElement(Dots_1.default, {\n      state: this.state,\n      props: this.props,\n      goToSlide: this.goToSlide,\n      getState: function () {\n        return _this.getState();\n      }\n    });\n  }, Carousel.prototype.renderCarouselItems = function () {\n    var clones = [];\n\n    if (this.props.infinite) {\n      var childrenArr = React.Children.toArray(this.props.children);\n      clones = utils_1.getClones(this.state.slidesToShow, childrenArr);\n    }\n\n    return React.createElement(CarouselItems_1.default, {\n      clones: clones,\n      goToSlide: this.goToSlide,\n      state: this.state,\n      props: this.props\n    });\n  }, Carousel.prototype.render = function () {\n    var _a = this.props,\n        deviceType = _a.deviceType,\n        arrows = _a.arrows,\n        removeArrowOnDeviceType = _a.removeArrowOnDeviceType,\n        infinite = _a.infinite,\n        containerClass = _a.containerClass,\n        sliderClass = _a.sliderClass,\n        customTransition = _a.customTransition,\n        partialVisbile = _a.partialVisbile,\n        centerMode = _a.centerMode,\n        additionalTransfrom = _a.additionalTransfrom,\n        renderDotsOutside = _a.renderDotsOutside,\n        renderButtonGroupOutside = _a.renderButtonGroupOutside,\n        className = _a.className;\n    \"production\" !== process.env.NODE_ENV && utils_1.throwError(this.state, this.props);\n\n    var _b = utils_1.getInitialState(this.state, this.props),\n        shouldRenderOnSSR = _b.shouldRenderOnSSR,\n        partialVisibilityGutter = _b.partialVisibilityGutter,\n        shouldRenderAtAll = _b.shouldRenderAtAll,\n        isLeftEndReach = utils_1.isInLeftEnd(this.state),\n        isRightEndReach = utils_1.isInRightEnd(this.state),\n        shouldShowArrows = arrows && !(removeArrowOnDeviceType && (deviceType && -1 < removeArrowOnDeviceType.indexOf(deviceType) || this.state.deviceType && -1 < removeArrowOnDeviceType.indexOf(this.state.deviceType))) && !utils_1.notEnoughChildren(this.state, this.props) && shouldRenderAtAll,\n        disableLeftArrow = !infinite && isLeftEndReach,\n        disableRightArrow = !infinite && isRightEndReach,\n        currentTransform = partialVisbile ? utils_1.getTransformForPartialVsibile(this.state, partialVisibilityGutter, this.props) : centerMode ? utils_1.getTransformForCenterMode(this.state, this.props) : this.state.transform;\n\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: \"react-multi-carousel-list \" + containerClass + \" \" + className,\n      ref: this.containerRef\n    }, React.createElement(\"ul\", {\n      className: \"react-multi-carousel-track \" + sliderClass,\n      style: {\n        transition: this.isAnimationAllowed ? customTransition || defaultTransition : \"none\",\n        overflow: shouldRenderOnSSR ? \"hidden\" : \"unset\",\n        transform: \"translate3d(\" + (currentTransform + additionalTransfrom) + \"px,0,0)\"\n      },\n      onMouseMove: this.handleMove,\n      onMouseDown: this.handleDown,\n      onMouseUp: this.handleOut,\n      onMouseEnter: this.handleEnter,\n      onMouseLeave: this.handleOut,\n      onTouchStart: this.handleDown,\n      onTouchMove: this.handleMove,\n      onTouchEnd: this.handleOut\n    }, this.renderCarouselItems()), shouldShowArrows && !disableLeftArrow && this.renderLeftArrow(), shouldShowArrows && !disableRightArrow && this.renderRightArrow(), shouldRenderAtAll && !renderButtonGroupOutside && this.renderButtonGroups(), shouldRenderAtAll && !renderDotsOutside && this.renderDotsList()), shouldRenderAtAll && renderDotsOutside && this.renderDotsList(), shouldRenderAtAll && renderButtonGroupOutside && this.renderButtonGroups());\n  }, Carousel.defaultProps = {\n    slidesToSlide: 1,\n    infinite: !1,\n    draggable: !0,\n    swipeable: !0,\n    arrows: !0,\n    containerClass: \"\",\n    sliderClass: \"\",\n    itemClass: \"\",\n    keyBoardControl: !0,\n    autoPlaySpeed: 3e3,\n    showDots: !1,\n    renderDotsOutside: !1,\n    renderButtonGroupOutside: !1,\n    minimumTouchDrag: 80,\n    className: \"\",\n    dotListClass: \"\",\n    focusOnSelect: !1,\n    centerMode: !1,\n    additionalTransfrom: 0\n  }, Carousel;\n}(React.Component);\n\nexports.default = Carousel;","map":null,"metadata":{},"sourceType":"script"}