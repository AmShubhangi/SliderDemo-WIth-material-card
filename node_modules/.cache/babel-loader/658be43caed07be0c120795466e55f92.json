{"ast":null,"code":"\"use strict\";\n\nfunction getOriginalCounterPart(index, _a, childrenArr) {\n  var slidesToShow = _a.slidesToShow,\n      currentSlide = _a.currentSlide;\n  return childrenArr.length > 2 * slidesToShow ? index + 2 * slidesToShow : currentSlide >= childrenArr.length ? childrenArr.length + index : index;\n}\n\nfunction getOriginalIndexLookupTableByClones(slidesToShow, childrenArr) {\n  if (childrenArr.length > 2 * slidesToShow) {\n    for (var table = {}, firstBeginningOfClones = childrenArr.length - 2 * slidesToShow, firstEndOfClones = childrenArr.length - firstBeginningOfClones, firstCount = firstBeginningOfClones, i = 0; i < firstEndOfClones; i++) table[i] = firstCount, firstCount++;\n\n    var secondBeginningOfClones = childrenArr.length + firstEndOfClones,\n        secondEndOfClones = secondBeginningOfClones + childrenArr.slice(0, 2 * slidesToShow).length,\n        secondCount = 0;\n\n    for (i = secondBeginningOfClones; i <= secondEndOfClones; i++) table[i] = secondCount, secondCount++;\n\n    var originalEnd = secondBeginningOfClones,\n        originalCounter = 0;\n\n    for (i = firstEndOfClones; i < originalEnd; i++) table[i] = originalCounter, originalCounter++;\n\n    return table;\n  }\n\n  table = {};\n  var totalSlides = 3 * childrenArr.length,\n      count = 0;\n\n  for (i = 0; i < totalSlides; i++) table[i] = count, ++count === childrenArr.length && (count = 0);\n\n  return table;\n}\n\nfunction getClones(slidesToShow, childrenArr) {\n  return childrenArr.length < slidesToShow ? childrenArr : childrenArr.length > 2 * slidesToShow ? childrenArr.slice(childrenArr.length - 2 * slidesToShow, childrenArr.length).concat(childrenArr, childrenArr.slice(0, 2 * slidesToShow)) : childrenArr.concat(childrenArr, childrenArr);\n}\n\nfunction getInitialSlideInInifteMode(slidesToShow, childrenArr) {\n  return childrenArr.length > 2 * slidesToShow ? 2 * slidesToShow : childrenArr.length;\n}\n\nfunction checkClonesPosition(_a, childrenArr, props) {\n  var isReachingTheEnd,\n      currentSlide = _a.currentSlide,\n      slidesToShow = _a.slidesToShow,\n      itemWidth = _a.itemWidth,\n      totalItems = _a.totalItems,\n      nextSlide = 0,\n      nextPosition = 0,\n      isReachingTheStart = 0 === currentSlide,\n      originalFirstSlide = childrenArr.length - (childrenArr.length - 2 * slidesToShow);\n  return childrenArr.length > 2 * slidesToShow ? ((isReachingTheEnd = currentSlide >= originalFirstSlide + childrenArr.length) && (nextPosition = -itemWidth * (nextSlide = currentSlide - childrenArr.length)), isReachingTheStart && (nextPosition = -itemWidth * (nextSlide = originalFirstSlide + (childrenArr.length - 2 * slidesToShow)))) : ((isReachingTheEnd = currentSlide >= 2 * childrenArr.length) && (nextPosition = -itemWidth * (nextSlide = currentSlide - childrenArr.length)), isReachingTheStart && (nextPosition = props.showDots ? -itemWidth * (nextSlide = childrenArr.length) : -itemWidth * (nextSlide = totalItems - 2 * slidesToShow))), {\n    isReachingTheEnd: isReachingTheEnd,\n    isReachingTheStart: isReachingTheStart,\n    nextSlide: nextSlide,\n    nextPosition: nextPosition\n  };\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n}), exports.getOriginalCounterPart = getOriginalCounterPart, exports.getOriginalIndexLookupTableByClones = getOriginalIndexLookupTableByClones, exports.getClones = getClones, exports.getInitialSlideInInifteMode = getInitialSlideInInifteMode, exports.checkClonesPosition = checkClonesPosition;","map":null,"metadata":{},"sourceType":"script"}